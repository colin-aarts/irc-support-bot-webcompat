// Generated by LiveScript 1.5.0
(function(){
  var util, api;
  util = require('util');
  api = require('caniuse-api');
  module.exports = function(){
    var this$ = this;
    return this.register_special_command({
      name: 'compat',
      description: 'Check browser support for web standards.',
      admin_only: false,
      fn: function(event, inputData, outputData){
        var opts, ref$, args, message, query, result, feature, resultAry, p, v, s1, s2, res$, pp, vv, uri, browser, e, yesno, own$ = {}.hasOwnProperty;
        opts = (ref$ = this$.botOptions.pluginOptions) != null ? ref$['irc-support-bot-webcompat'] : void 8;
        args = inputData.args.split(' ');
        try {
          if (opts.browsers) {
            api.setBrowserScope(opts.browsers);
          }
        } catch (e$) {}
        if (in$('?', inputData.flags)) {
          message = ['Syntax: compat latest • List the latest stable browser versions', 'Syntax: compat scope • List the scope of browsers used for checking support', 'Syntax: compat legend • Explains the compatibility result message', 'Syntax: compat find <query> • Search the features to find the name to use for compatibility details', 'Syntax: compat <feature> • Query web standards browser support for a feature', 'Syntax: compat <feature> <browser> • Check web standards support for a feature against a browser, e.g. « fileapi ie 8 »'];
          return this$.send('notice', event.person.nick, message);
        } else if (args[0] === 'latest') {
          message = "« web compatibility » latest stable browsers: " + api.getLatestStableBrowsers().join(', ');
        } else if (args[0] === 'scope') {
          message = "« web compatibility » browser scope: " + api.getBrowserScope().join(', ');
        } else if (args[0] === 'legend') {
          message = "« web compatibility » result message legend: y = yes, since version • n = no, up to version • a = partial, up to version • x = prefixed, up to version";
        } else if (args[0] === 'find') {
          query = args[1];
          if (!query) {
            message = "Unsufficient arguments specified for « find »";
          } else {
            result = api.find(query);
            if (!result.length) {
              message = "« web compatibility » no results for query « " + query + " »";
            } else {
              message = "« web compatibility » results for query « " + query + " »: " + result.join(', ');
            }
          }
        } else if (args[0] && !args[1]) {
          feature = args[0];
          try {
            result = api.getSupport(feature);
          } catch (e$) {}
          if (result) {
            resultAry = [];
            for (p in result) if (own$.call(result, p)) {
              v = result[p];
              s1 = p + " • ";
              res$ = [];
              for (pp in v) if (own$.call(v, pp)) {
                vv = v[pp];
                if (!pp.startsWith('#')) {
                  res$.push(pp + ": " + vv);
                }
              }
              s2 = res$;
              s2 = s2.join(', ');
              resultAry.push(s1 + s2);
            }
            uri = "http://caniuse.com/#feat=" + feature;
            resultAry.push("« " + feature + " » details: " + uri);
            return this$.send(outputData.method, outputData.recipient, resultAry);
          } else {
            message = "« web compatibility » unknown feature « " + feature + " » • use « " + inputData.trigger + "compat find <query> » to find feature names; see « " + inputData.trigger + "compat/? » for details";
          }
        } else if (args[0] && args[1]) {
          feature = args[0];
          browser = args.slice(1).join(' ');
          try {
            result = api.isSupported(feature, browser);
          } catch (e$) {
            e = e$;
            if (e.name === 'BrowserslistError') {
              message = "« web compatibility » unknown browser « " + browser + " » (note: you need a space between the name and the version number)";
            } else {
              message = "« web compatibility » unknown feature « " + feature + " » • use « " + inputData.trigger + "compat find <query> » to find feature names; see « " + inputData.trigger + "compat/? » for details";
            }
          }
          if (result != null) {
            yesno = result ? '' : ' *NOT*';
            message = "« " + feature + " » is" + yesno + " supported in « " + browser + " »";
          }
        } else {
          message = "« web compatibility » insufficient arguments specified; see « " + inputData.trigger + "compat/? » for details";
        }
        if (message) {
          return this$.send(outputData.method, outputData.recipient, message);
        }
      }
    });
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
